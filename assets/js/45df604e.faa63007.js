"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[9479],{7168:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>c});var t=s(30758);const r={},o=t.createContext(r);function a(n){const e=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),t.createElement(o.Provider,{value:e},n.children)}},29813:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"algorithm/graphs/dijkstra","title":"Dijkstra","description":"\u5927\u540d\u9f0e\u9f0e\u7684\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u4e0d\u518d\u8d58\u8ff0","source":"@site/docs/algorithm/graphs/dijkstra.md","sourceDirName":"algorithm/graphs","slug":"/algorithm/graphs/dijkstra","permalink":"/docs/algorithm/graphs/dijkstra","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Dijkstra"},"sidebar":"algorithm","previous":{"title":"Bellman-Ford","permalink":"/docs/algorithm/graphs/bellman-ford"},"next":{"title":"\u4e8c\u5206\u67e5\u627e","permalink":"/docs/algorithm/application/binary-search"}}');var r=s(86070),o=s(7168);const a={title:"Dijkstra"},c=void 0,i={},l=[{value:"\u6570\u636e\u7ed3\u6784",id:"\u6570\u636e\u7ed3\u6784",level:2},{value:"\u7b97\u6cd5\u6b65\u9aa4",id:"\u7b97\u6cd5\u6b65\u9aa4",level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:2},{value:"\u5e94\u7528",id:"\u5e94\u7528",level:2}];function h(n){const e={a:"a",br:"br",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.p,{children:"\u5927\u540d\u9f0e\u9f0e\u7684\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u4e0d\u518d\u8d58\u8ff0"}),"\n",(0,r.jsx)(e.h2,{id:"\u6570\u636e\u7ed3\u6784",children:"\u6570\u636e\u7ed3\u6784"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// \u8f93\u5165\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684next\u8282\u70b9\uff0c\u8ddd\u79bb\uff1b\u4ee5\u53ca\u662f\u5426\u904d\u5386\u8fc7\u6539\u8282\u70b9\nconst graph = {\n  A: {\n    neighbours: {\n      B: 22,\n      ...\n    },\n    done: false;\n  },\n  B: {...},\n  ...\n}\n\n\n// \u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5c0fcost\nconst = {\n  A: 0,\n  B: 22,\n  ...\n}\n\n// \u6700\u5c0fcost\u5bf9\u5e94\u7684\u524d\u4e00\u8282\u70b9\nparent = {\n  A: 'B'\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u7b97\u6cd5\u6b65\u9aa4",children:"\u7b97\u6cd5\u6b65\u9aa4"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u627e\u51fa\u8ddd\u79bb\u6700\u77ed\u7684\u8282\u70b9","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u904d\u5386\u5176 neighbours"}),"\n",(0,r.jsx)(e.li,{children:"\u5982\u679c\u8ba1\u7b97\u51fa neighbour \u7684 cost \u5c0f\u4e8e\u5176\u5f53\u524d cost\uff0c\u66f4\u65b0 neighbour \u7684 cost"}),"\n",(0,r.jsx)(e.li,{children:"\u5bf9\u8be5\u8282\u70b9\u6807\u8bb0\u5b8c\u6210"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.li,{children:"\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u3002"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:""}),"\n",(0,r.jsx)(e.h2,{id:"\u793a\u4f8b",children:"\u793a\u4f8b"}),"\n",(0,r.jsxs)(e.p,{children:["\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5bfb\u627e\u4ece \u8d77\u70b9 A \u5230 \u7ec8\u70b9 F \u7684\u6700\u77ed\u8def\u5f84\u3002",(0,r.jsx)(e.br,{}),"\n",(0,r.jsx)(e.img,{alt:"WechatIMG112.jpeg",src:s(34991).A+"",width:"1396",height:"1080"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// graph, \u7528\u4ee5\u63cf\u8ff0\u95ee\u9898\nconst graph = {\n    A: { neighbours: { B: 5, C: 2 }, done: false },\n    B: { neighbours: { D: 4, E: 2 }, done: false },\n    C: { neighbours: { B: 8, E: 7 }, done: false },\n    D: { neighbours: { E: 6, F: 3 }, done: false },\n    E: { neighbours: { F: 1 }, done: false },\n    F: { neighbours: {}, done: false }\n};\n\n// \u83b7\u53d6\u672a\u5904\u7406\u7684\uff0c\u6700\u8fd1\u7684\u70b9\nconst getNearestNode = (costs, graph) => {\n    const sortedKeys = Object.keys(costs)\n        .filter(key => !graph[key].done)\n        .sort((a, b) => costs[a] - costs[b]);\n    return sortedKeys[0];\n};\n\nfunction dijkstra(graph) {\n    // \u5148\u8bb0\u5f55\u8d77\u59cb\u70b9\uff0c\u4e3a0\n    const costs = {\n        A: 0\n    };\n\n    const parents = {};\n    let key;\n    while ((key = getNearestNode(costs, graph))) {\n        const nbs = graph[key].neighbours;\n        for (const nb of Object.keys(nbs)) {\n            const cost = costs[key];\n            if (!costs[nb] || costs[nb] > cost + nbs[nb]) {\n                costs[nb] = cost + nbs[nb];\n                parents[nb] = key;\n            }\n        }\n        graph[key].done = true;\n    }\n    console.log(costs);\n    console.log(parents);\n}\n\ndijkstra(graph);\n\n// \u7ed3\u679c\u5982\u4e0b\n// costs\n{ A: 0, B: 5, C: 2, E: 7, D: 9, F: 8 }\n// parents\n{ B: 'A', C: 'A', E: 'B', D: 'B', F: 'E' }\n\n"})}),"\n",(0,r.jsx)(e.h2,{id:"\u5e94\u7528",children:"\u5e94\u7528"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"https://leetcode.com/problems/network-delay-time/",children:"Leetcode 743. Network Delay Time"}),(0,r.jsx)(e.br,{}),"\n","\u4ee3\u7801\u5982\u4e0b"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"/**\n * @param {number[][]} times\n * @param {number} N\n * @param {number} K\n * @return {number}\n */\nconst generateGraph = times => {\n    const graph = {};\n    for (const [t0, t1, t2] of times) {\n        if (!graph[t0]) {\n            graph[t0] = { neighbours: {} };\n        }\n        if (!graph[t1]) {\n            graph[t1] = { neighbours: {} };\n        }\n        graph[t0].neighbours[t1] = t2;\n    }\n    return graph;\n};\n\nconst getNearestNode = (costs, graph) => {\n    const sortedKeys = Object.keys(costs)\n        .filter(key => !graph[key].done)\n        .sort((a, b) => costs[a] - costs[b]);\n    return sortedKeys[0];\n};\n\nvar networkDelayTime = function (times, N, K) {\n    const graph = generateGraph(times);\n    const costs = { [K]: 0 };\n    const parents = {};\n\n    let key;\n    while ((key = getNearestNode(costs, graph))) {\n        const nbs = graph[key].neighbours;\n        for (const nb of Object.keys(nbs)) {\n            const cost = costs[key];\n            if (costs[nb] === undefined || costs[nb] > cost + nbs[nb]) {\n                costs[nb] = cost + nbs[nb];\n                parents[nb] = key;\n            }\n        }\n        graph[key].done = true;\n    }\n\n    if (Object.keys(costs).length !== N) {\n        return -1;\n    }\n    return Math.max(...Object.values(costs));\n};\n\nconsole.log(\n    networkDelayTime(\n        [\n            [2, 1, 1],\n            [2, 3, 1],\n            [3, 4, 1],\n        ],\n        4,\n        2,\n    ),\n);\nconsole.log(\n    networkDelayTime(\n        [\n            [1, 2, 1],\n            [2, 1, 3],\n        ],\n        2,\n        2,\n    ),\n);\n"})})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}},34991:(n,e,s)=>{s.d(e,{A:()=>t});const t=s.p+"assets/images/sample-a5e518942b5ba1f01d126fd732cb85db.jpg"}}]);
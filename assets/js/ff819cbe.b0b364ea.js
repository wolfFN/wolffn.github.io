"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[9030],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return f}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),u=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=u(e.components);return t.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(r),f=o,h=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return r?t.createElement(h,i(i({ref:n},c),{},{components:r})):t.createElement(h,i({ref:n},c))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=r[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6215:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var t=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],l={title:"\u904d\u5386"},s=void 0,u={unversionedId:"algorithm/tree/traverse",id:"algorithm/tree/traverse",isDocsHomePage:!1,title:"\u904d\u5386",description:"\u6811\u7684\u904d\u5386\u4e3b\u8981\u5206\u524d\u3001\u4e2d\u3001\u540e\u5e8f\uff0c\u6bcf\u79cd\u904d\u5386\u90fd\u53ef\u4ee5\u5206\u522b\u7528\u9012\u5f52\uff08recursion\uff09\u548c\u5faa\u73af\uff08iteration\uff09\u6765\u5b9e\u73b0\u3002",source:"@site/docs/algorithm/tree/traverse.md",sourceDirName:"algorithm/tree",slug:"/algorithm/tree/traverse",permalink:"/docs/algorithm/tree/traverse",tags:[],version:"current",frontMatter:{title:"\u904d\u5386"},sidebar:"algorithm",previous:{title:"\u5b50\u5b57\u7b26\u4e32\u67e5\u627e",permalink:"/docs/algorithm/string/substring_search"},next:{title:"\u5e76\u67e5\u96c6",permalink:"/docs/algorithm/graphs/union-find"}},c=[{value:"Pre-order",id:"pre-order",children:[],level:2},{value:"In-order",id:"in-order",children:[],level:2},{value:"Post-order",id:"post-order",children:[],level:2}],p={toc:c};function d(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"\u6811\u7684\u904d\u5386\u4e3b\u8981\u5206\u524d\u3001\u4e2d\u3001\u540e\u5e8f\uff0c\u6bcf\u79cd\u904d\u5386\u90fd\u53ef\u4ee5\u5206\u522b\u7528\u9012\u5f52\uff08recursion\uff09\u548c\u5faa\u73af\uff08iteration\uff09\u6765\u5b9e\u73b0\u3002"),(0,a.kt)("h2",{id:"pre-order"},"Pre-order"),(0,a.kt)("p",null,"root -> left -> right",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-preorder-traversal/"},"Leetcode 144")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\n// Recursion\nfunction preorderTraversal(root) {\n    const result = [];\n    pre(root, result);\n    return result;\n};\n\nfunction pre(node, result) {\n    if (!node) {\n        return;\n    }\n    result.push(node.val);\n    pre(node.left, result);\n    pre(node.right, result);\n}\n\n// Iteration\nfunction preorderTraversal(root) {\n    const stack = [root];\n    const result = [];\n    let node;\n    while (node = stack.pop()) {\n        result.push(node.val);\n        if (node.right) {\n            stack.push(node.right);\n        }\n        if (node.left) {\n            stack.push(node.left);\n        }\n    }\n    \n    return result;\n};\n\n")),(0,a.kt)("h2",{id:"in-order"},"In-order"),(0,a.kt)("p",null,"left -> root -> right",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-inorder-traversal/"},"Leetcode 94")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\n// Recursion\nvar inorderTraversal = function(root) {\n    const result = [];\n    inoder(root, result);\n    return result;\n};\n\nconst inoder = function(node, result) {\n    if (!node) {\n        return;\n    }\n    inoder(node.left, result);\n    result.push(node.val);\n    inoder(node.right, result);\n};\n\n\n// Iteration\nvar inorderTraversal = function(root) {\n    const result = [];\n    const stack = [];\n    while (root || stack.length()) {\n        if (root) {\n            stack.push(root);\n            root = root.left;\n        } else {\n            root = stack.pop();\n            result.push(root.val);\n            root = root.right;\n        }\n    }\n\n    return result;\n};\n\n\n")),(0,a.kt)("h2",{id:"post-order"},"Post-order"),(0,a.kt)("p",null,"left -> right -> root",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/binary-tree-postorder-traversal/"},"Leetcode 145")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\n\n// Recursion\nvar postorderTraversal = function(root) {\n    const result = [];\n    postorder(root, result);\n    return result;\n};\n\nconst postorder = function(node, result) {\n    if (!node) {\n        return;\n    }\n    postorder(node.left, result);\n    postorder(node.right, result);\n    result.push(node.val);\n}\n\n// Iteration\nvar postorderTraversal = function(root) {\n    const result = [];\n    const stack = [root];\n    while (stack.length) {\n        const node = stack.pop();\n\n        if (!node) {\n            continue;\n        }\n\n        result.unshift(node.val);\n        stack.push(node.left);\n        stack.push(node.right);\n    }\n    return result;\n};\n\n")))}d.isMDXComponent=!0}}]);
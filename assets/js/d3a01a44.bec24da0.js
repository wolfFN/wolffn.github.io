"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[2033],{7168:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var a=s(30758);const l={},r=a.createContext(l);function t(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),a.createElement(r.Provider,{value:n},e.children)}},81845:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>t,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"data/python/sql-alchemy","title":"SQLAlchemy","description":"SQLAlchemy \u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a","source":"@site/docs/data/python/sql-alchemy.md","sourceDirName":"data/python","slug":"/data/python/sql-alchemy","permalink":"/docs/data/python/sql-alchemy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SQLAlchemy"},"sidebar":"Python","previous":{"title":"Environment","permalink":"/docs/data/python/env"},"next":{"title":"SQLAlchemy RelationShip","permalink":"/docs/data/python/sql-alchemy-relationship"}}');var l=s(86070),r=s(7168);const t={title:"SQLAlchemy"},c=void 0,i={},d=[{value:"\u540d\u8bcd\u89e3\u91ca",id:"\u540d\u8bcd\u89e3\u91ca",level:2},{value:"Connection",id:"connection",level:2},{value:"Transaction",id:"transaction",level:2},{value:"text()",id:"text",level:3},{value:"Commit",id:"commit",level:3},{value:"Result",id:"result",level:3},{value:"\u4f20\u9012\u53c2\u6570",id:"\u4f20\u9012\u53c2\u6570",level:3},{value:"MetaData",id:"metadata",level:2},{value:"ORM \u6a21\u5f0f",id:"orm-\u6a21\u5f0f",level:3},{value:"Table Reflection",id:"table-reflection",level:3},{value:"Data - Core",id:"data---core",level:2},{value:"INSERT",id:"insert",level:3},{value:"SELECT",id:"select",level:3},{value:"WHERE",id:"where",level:4},{value:"JOIN",id:"join",level:4},{value:"UPDATE",id:"update",level:3},{value:"DELETE",id:"delete",level:3},{value:"Data - ORM",id:"data---orm",level:2},{value:"INSERT",id:"insert-1",level:3},{value:"SELECT",id:"select-1",level:3},{value:"UPDATE",id:"update-1",level:3},{value:"DELETE",id:"delete-1",level:3}];function o(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:"SQLAlchemy \u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff1a"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"Core"})," \u57fa\u7840\u67b6\u6784\uff0c\u4f5c\u4e3a ",(0,l.jsx)(n.code,{children:"database toolkit"}),"\u3002\u63d0\u4f9b\u7684\u5de5\u5177\u7528\u4e8e\u7ba1\u7406\u4e0e\u6570\u636e\u5e93\u7684\u8fde\u63a5\uff0c\u67e5\u8be2\u6570\u636e\u5e93\u5e76\u4e0e\u7ed3\u679c\u4ea4\u4e92\uff0c\u4ee5\u53caSQL\u8bed\u53e5\u7684\u7a0b\u5e8f\u5316\u6784\u5efa\u3002"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ORM"})," \u6784\u5efa\u4e8e ",(0,l.jsx)(n.code,{children:"Core"})," \u57fa\u7840\u4e4b\u4e0a\uff0c\u63d0\u4f9b\u53ef\u9009\u7684\u5173\u7cfb\u6620\u5c04\uff08object relational mapping \uff09\u80fd\u529b\u3002\u5b83\u6269\u5c55\u4e86 ",(0,l.jsx)(n.code,{children:"Core"})," \u7684 SQL \u8868\u8fbe\u5f0f\u8bed\u8a00\uff0c\u5141\u8bb8\u7528\u7528\u6237\u5b9a\u4e49\u7684\u5bf9\u8c61\u6765\u7ec4\u6210\u548c\u8c03\u7528SQL\u67e5\u8be2\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"\u5b89\u88c5\u4f9d\u8d56"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"conda install sqlalchemy pymysql\n"})}),"\n",(0,l.jsx)(n.p,{children:"\u5f15\u5165 SQLAlchemy \u5e76\u67e5\u8be2\u7248\u672c"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"import sqlalchemy\nsqlalchemy.__version__\n\n# 1.4.27\n"})}),"\n",(0,l.jsx)(n.h2,{id:"\u540d\u8bcd\u89e3\u91ca",children:"\u540d\u8bcd\u89e3\u91ca"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"DDL"})," \u662fSQL\u7684\u5b50\u96c6\uff0c\u6307\u7684\u662f\u5176\u4e2d ",(0,l.jsx)(n.code,{children:"schema-level"})," \u7684\u64cd\u4f5c\uff0c\u6bd4\u5982\uff0c",(0,l.jsx)(n.code,{children:"Table"})," \u7684\u521b\u5efa\u3001\u4fee\u6539\u6216\u5220\u9664\u3002\u7531\u4e8e\u8bb8\u591a\u6570\u636e\u5e93\u4f7f\u7528\u4e8b\u52a1\u6027\u7684 ",(0,l.jsx)(n.code,{children:"DDL"})," \uff08\u5728 ",(0,l.jsx)(n.code,{children:"COMMIT"})," \u4e4b\u524d\u4e0d\u751f\u6548\uff09\uff0c\u6240\u4ee5\uff0c\u7c7b\u4f3c ",(0,l.jsx)(n.code,{children:"CREATE TABLE"})," \u8fd9\u6837\u7684 ",(0,l.jsx)(n.code,{children:"DDL"})," \u5e94\u653e\u5230\u4e00\u4e2a\u4ee5 ",(0,l.jsx)(n.code,{children:"COMMIT"})," \u7ed3\u675f\u7684\u4e8b\u52a1\u5757\u4e2d\u3002"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"DML"})," INSERT"]}),"\n",(0,l.jsx)(n.h2,{id:"connection",children:"Connection"}),"\n",(0,l.jsxs)(n.p,{children:["\u901a\u8fc7 ",(0,l.jsx)(n.code,{children:"create_engine"})," \u521b\u5efa\u8fde\u63a5\u3002\u683c\u5f0f\u5982\u4e0b\uff1a"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-shell",children:"[DB]+[DBAPI]://[user-name]:[password]@[database-location]/[database-name]\n"})}),"\n",(0,l.jsxs)(n.p,{children:["\u6bd4\u5982\uff0c\u901a\u8fc7 ",(0,l.jsx)(n.code,{children:"pymysql"})," \u8fde\u63a5\u5230 ",(0,l.jsx)(n.code,{children:"localhost:3306"})," \u7684 ",(0,l.jsx)(n.code,{children:"mysql"}),", \u7528\u6237\u540d ",(0,l.jsx)(n.code,{children:"nodejs"}),"\uff0c\u5bc6\u7801 ",(0,l.jsx)(n.code,{children:"nodejs"}),"\uff0c\u6570\u636e\u5e93\u540d ",(0,l.jsx)(n.code,{children:"nodejs"}),"\uff1a"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import create_engine,text\nengine = create_engine(\n    "mysql+pymysql://nodejs:nodejs@localhost:3306/nodejs", echo=True, future=True)\n'})}),"\n",(0,l.jsxs)(n.p,{children:["\u5176\u4e2d\uff0c",(0,l.jsx)(n.code,{children:"echo"})," \u53c2\u6570\u7528\u4e8e\u8c03\u8bd5\uff0c",(0,l.jsx)(n.code,{children:"future"})," \u53c2\u6570\u7528\u4e8e\u652f\u6301\u672a\u6765\u7248\u672c\u7684 SQLAlchemy\u3002"]}),"\n",(0,l.jsx)(n.h2,{id:"transaction",children:"Transaction"}),"\n",(0,l.jsxs)(n.p,{children:["\u4ece\u4f7f\u7528\u7684\u89d2\u5ea6\u6765\u770b\uff0c",(0,l.jsx)(n.code,{children:"engine"})," \u7684\u76ee\u7684\u5728\u4e8e\u63d0\u4f9b\u4e00\u4e2a\u4e0e\u6570\u636e\u5e93\u8fde\u63a5\u7684 ",(0,l.jsx)(n.code,{children:"Connection"}),"\u3002",(0,l.jsx)(n.code,{children:"Connection"})," \u4ee3\u8868\u4e86\u4e00\u4e2a\u4e0e\u6570\u636e\u5e93\u8fde\u63a5\u7684\u8d44\u6e90\uff0c\u6211\u4eec\u5e0c\u671b\u628a\u8fd9\u4e2a\u5bf9\u8c61\u7684\u4f7f\u7528\u8303\u56f4\u9650\u5236\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u4e0a\u4e0b\u6587\u4e2d\uff0c\u800c\u505a\u5230\u8fd9\u4e00\u70b9\u7684\u6700\u597d\u65b9\u6cd5\u662f ",(0,l.jsx)(n.code,{children:"Python context manager form"}),"\uff0c\u4e5f\u5c31\u662f ",(0,l.jsx)(n.code,{children:"with"})," \u8bed\u53e5\u3002"]}),"\n",(0,l.jsx)(n.h3,{id:"text",children:"text()"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"text"})," \u662f SQLAlchemy \u4e2d\u7684\u7b80\u5355\u7ed3\u6784\uff0c\u5b83\u5141\u8bb8\u6211\u4eec\u5c06SQL\u8bed\u53e5\u5199\u6210\u6587\u672cSQL\u3002\u5c5e\u4e8e\u4e00\u79cd\u4f8b\u5916\u7528\u6cd5\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'# \u521b\u5efa Table\n# "commit as you go"\nwith engine.connect() as conn:\n    conn.execute(text("CREATE TABLE some_table (x int, y int)"))\n    conn.commit()\n\n# \u63d2\u5165\u6570\u636e\n# "begin once"\nwith engine.begin() as conn:\n    conn.execute(\n        text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),\n        [{"x": 1, "y": 1}, {"x": 2, "y": 4}]\n    )\n\n# \u67e5\u8be2\nwith engine.connect() as conn:\n    result = conn.execute(text("SELECT * from some_table"))\n    print(result.all())\n\n\n# \u5220\u9664 Table\nwith engine.connect() as conn:\n    conn.execute(text("DROP TABLE IF EXISTS some_table"))\n    conn.commit()\n'})}),"\n",(0,l.jsx)(n.h3,{id:"commit",children:"Commit"}),"\n",(0,l.jsx)(n.p,{children:"\u4e0a\u8ff0\u4ee3\u7801\u5c55\u793a\u4e86\u4e24\u79cd Commit \u7684\u65b9\u5f0f\uff1a"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"commit as you go"}),"\uff0c\u4f7f\u7528 ",(0,l.jsx)(n.code,{children:"engine.connect()"})," \u8fde\u63a5\uff0c\u5e76\u5728\u7ed3\u5c3e\u5904 ",(0,l.jsx)(n.code,{children:"conn.commit()"}),"\u3002"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"begin once"}),"\u3002\u4f7f\u7528 ",(0,l.jsx)(n.code,{children:"engine.begin()"}),"\uff0c\u65e0\u9700\u663e\u5f0f commit\u3002\u8fd9\u662f\u6bd4\u8f83\u63a8\u8350\u7684\u65b9\u5f0f\u3002"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"result",children:"Result"}),"\n",(0,l.jsx)(n.p,{children:"\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u5747\u53ef\u7528\u4ee5\u904d\u5386\u67e5\u8be2\u7ed3\u679c"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'with engine.connect() as conn:\n    result = conn.execute(text("SELECT * from some_table"))\n    print(result.all())\n\n    result = conn.execute(text("SELECT * from some_table"))\n    for x, y in result:\n        print(x,y)\n\n    result = conn.execute(text("SELECT * from some_table"))\n    for row in result:\n        print(row.x, row.y)\n\n    result = conn.execute(text("SELECT * from some_table"))\n    for row in result:\n        print(row[0], row[1])\n\n\n    result = conn.execute(text("SELECT * from some_table"))\n    for dict_row in result.mappings():\n        print(dict_row[\'x\'], dict_row[\'y\'])\n'})}),"\n",(0,l.jsx)(n.h3,{id:"\u4f20\u9012\u53c2\u6570",children:"\u4f20\u9012\u53c2\u6570"}),"\n",(0,l.jsxs)(n.p,{children:["\u4e3a\u907f\u514d ",(0,l.jsx)(n.code,{children:"SQL"})," \u6ce8\u5165\u653b\u51fb\uff0c\u5728\u4f7f\u7528 ",(0,l.jsx)(n.code,{children:"SQL"})," \u6587\u672c\u65f6\uff0c\u5bf9\u4e8e ",(0,l.jsx)(n.code,{children:"python"})," \u5b57\u9762\u91cf\uff0c\u5373\u4f7f\u662f\u975e\u5b57\u7b26\u4e32\uff0c\u7c7b\u4f3c\u6570\u5b57\u3001\u65e5\u671f\uff0c\u4e5f\u4e0d\u53ef\u76f4\u63a5(\u4ee5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f)\u4f20\u5165 ",(0,l.jsx)(n.code,{children:"string"})," \u4e2d\u3002\u5e94\u5f53\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\uff1a"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'with engine.connect() as conn:\n    result = conn.execute(\n        text("SELECT * from some_table WHERE y > :y"),\n        {"y": 2}\n    )\n    print(result.all())\n'})}),"\n",(0,l.jsx)(n.p,{children:"\u591a\u4e2a\u53c2\u6570\uff1a"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'with engine.begin() as conn:\n    conn.execute(\n        text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),\n        [{"x": 11, "y": 12}, {"x": 13, "y": 14}]\n    )\n\nwith engine.begin() as conn:\n    conn.execute(\n        text("DELETE FROM some_table WHERE x = :x"),\n        [{"x": 11 }, {"x": 13 }]\n    )\n'})}),"\n",(0,l.jsxs)(n.p,{children:["\u6b64\u5916\u8fd8\u53ef\u4ee5\u7528 ",(0,l.jsx)(n.code,{children:"bindparam"})," \u5728 ",(0,l.jsx)(n.code,{children:"text()"})," \u65b9\u6cd5\u4e2d\u7ed1\u5b9a\u53c2\u6570\uff1a"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.orm import Session\nstmt = text("SELECT x, y FROM some_table WHERE y > :y ORDER BY x, y").bindparams(y=6)\nwith Session(engine) as session:\n    result = session.execute(stmt)\n'})}),"\n",(0,l.jsxs)(n.p,{children:["\u6b64\u4f8b\u4e2d ",(0,l.jsx)(n.code,{children:"Session"})," \u4e0e ",(0,l.jsx)(n.code,{children:"Connection"})," \u7c7b\u4f3c\uff0c\u4e3b\u8981\u5728 ",(0,l.jsx)(n.code,{children:"ORM"})," \u4e2d\u4f7f\u7528\u3002"]}),"\n",(0,l.jsx)(n.h2,{id:"metadata",children:"MetaData"}),"\n",(0,l.jsxs)(n.p,{children:["\u6211\u4eec\u4f7f\u7528 ",(0,l.jsx)(n.code,{children:"MetaData"})," \u4ee3\u6307\u8868\u793a ",(0,l.jsx)(n.code,{children:"Database"})," \u6982\u5ff5\u7684 ",(0,l.jsx)(n.code,{children:"python object"}),"\u3002\u6bd4\u5982\uff0c",(0,l.jsx)(n.code,{children:"Table"}),", ",(0,l.jsx)(n.code,{children:"Column"}),"\u3002"]}),"\n",(0,l.jsxs)(n.p,{children:["\u53ef\u4ee5\u7528\u4e8e\u521b\u5efa/\u5220\u9664 ",(0,l.jsx)(n.code,{children:"Table"}),"\u3002\u4e0d\u8fc7\u4e00\u822c\u5e94\u7528\u4e8e ",(0,l.jsx)(n.code,{children:"test suites"}),"\uff0c\u6216\u8005\u5c0f\u578b/\u7b80\u5355\u5e94\u7528\u3002\u5bf9\u4e8e\u9700\u8981\u957f\u671f\u7ef4\u62a4\u7684 ",(0,l.jsx)(n.code,{children:"database schema"}),"\uff0c \u63a8\u8350\u4f7f\u7528\u4e13\u95e8\u7684 ",(0,l.jsx)(n.code,{children:"schema management tool"}),"\uff0c\u6bd4\u5982 ",(0,l.jsx)(n.a,{href:"https://alembic.sqlalchemy.org/",children:"Alembic"}),"\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import MetaData, Table, Column, Integer, String, ForeignKey\nmetadata_obj = MetaData()\n\nuser_table = Table(\n    \"user_account\",\n    metadata_obj,\n    Column('id', Integer, primary_key=True),\n    Column('name', String(30)),\n    Column('fullname', String(50))\n)\n\naddress_table = Table(\n    \"address\",\n    metadata_obj,\n    Column('id', Integer, primary_key=True),\n    Column('user_id', ForeignKey('user_account.id'), nullable=False),\n    Column('email_address', String(30), nullable=False)\n)\n\n# \u6267\u884c\u521b\u5efa\u64cd\u4f5c\nmetadata_obj.create_all(engine)\n"})}),"\n",(0,l.jsxs)(n.p,{children:["\u6211\u4eec\u53ef\u4ee5\u7701\u7565\u4f5c\u4e3a ",(0,l.jsx)(n.code,{children:"ForeignKey"})," \u7684 ",(0,l.jsx)(n.code,{children:"Column"})," \u7684 ",(0,l.jsx)(n.code,{children:"datatype"}),"\uff0c\u5c06\u4f1a\u81ea\u52a8\u4ece\u5bf9\u5e94 ",(0,l.jsx)(n.code,{children:"Column"})," \u83b7\u53d6\u3002",(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.code,{children:"Column objects"})," \u5b58\u50a8\u4e8e ",(0,l.jsx)(n.code,{children:"Table.c"}),"\uff0c\u8fd9\u91cc\u4e5f\u53ef\u4ee5\u67e5\u8be2 ",(0,l.jsx)(n.code,{children:"Constraints"}),"\uff1a"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"user_table.c.name\n# Column('name', String(length=30), table=<user_account>)\nuser_table.c.keys()\n# ['id', 'name', 'fullname']\n\nuser_table.primary_key\n# PrimaryKeyConstraint(Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False))\n\naddress_table.foreign_keys\n# {ForeignKey('user_account.id')}\n\naddress_table.foreign_key_constraints\n"})}),"\n",(0,l.jsx)(n.h3,{id:"orm-\u6a21\u5f0f",children:"ORM \u6a21\u5f0f"}),"\n",(0,l.jsxs)(n.p,{children:["\u5728 ",(0,l.jsx)(n.code,{children:"ORM"})," \u6a21\u5f0f\u4e0b\uff0c",(0,l.jsx)(n.code,{children:"Metadata Object"})," \u5b58\u50a8\u4e8e ",(0,l.jsx)(n.code,{children:"register"})," \u4e2d\u3002 \u6240\u6709\u7684 ",(0,l.jsx)(n.code,{children:"mapped class"})," \u90fd\u5e94\u7ee7\u627f ",(0,l.jsx)(n.code,{children:"declarative base"}),"\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from sqlalchemy.orm import registry, declarative_base, relationship\nmapper_registry = registry() \n# \u83b7\u53d6 Base \u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u63a8\u8350\u540e\u8005\u3002\n# Base = mapper_registry.generate_base()\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = \'user_account\'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(30))\n    fullname = Column(String(50))\n\n    addresses = relationship("Address", back_populates="user")\n\n    def __repr__(self):\n        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"\n\nclass Address(Base):\n    __tablename__ = \'address\'\n\n    id = Column(Integer, primary_key=True)\n    email_address = Column(String(30), nullable=False)\n    user_id = Column(Integer, ForeignKey(\'user_account.id\'))\n\n    user = relationship("User", back_populates="addresses")\n\n    def __repr__(self):\n        return f"Address(id={self.id!r}, email_address={self.email_address!r})"\n\n\n# metadata \u4f4d\u4e8e mapper_registry.metadata \u6216 Base.metadata\uff0c\u63a8\u8350\u540e\u8005\n# mapper_registry.metadata.create_all(engine)\nBase.metadata.create_all(engine)\n'})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"User.__table__"})," \u7528\u4ee5\u5b58\u50a8 ",(0,l.jsx)(n.code,{children:"Table"})," \u76f8\u5173\u4fe1\u606f\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"User.__table__\n# Table('user_account', MetaData(), Column('id', Integer(), table=<user_account>, primary_key=True, nullable=False), Column('name', String(length=30), table=<user_account>), Column('fullname', String(), table=<user_account>), schema=None)\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"__repr__()"})," \u662f\u4e00\u4e2a\u53ef\u9009\u65b9\u6cd5\uff0c\u7528\u4e8e\u683c\u5f0f\u5316\u663e\u793a ",(0,l.jsx)(n.code,{children:"mapped class"})," \u7684\u4fe1\u606f\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"sandy = User(name=\"sandy\", fullname=\"Sandy Cheeks\")\nsandy\n# User(id=None, name='sandy', fullname='Sandy Cheeks')\n"})}),"\n",(0,l.jsx)(n.h3,{id:"table-reflection",children:"Table Reflection"}),"\n",(0,l.jsxs)(n.p,{children:["\u4e4b\u524d ",(0,l.jsx)(n.code,{children:"Metadata"})," \u7684\u76f8\u5173\u5185\u5bb9\uff0c\u90fd\u662f\u7528\u6765\u5411 ",(0,l.jsx)(n.code,{children:"Database"})," \u63d0\u4ea4 ",(0,l.jsx)(n.code,{children:"DDL"})," \u8bed\u53e5\u7684\u3002",(0,l.jsx)(n.code,{children:"Reflection"})," \u662f\u76f8\u53cd\u64cd\u4f5c\uff1a\u7528\u6765\u4ece ",(0,l.jsx)(n.code,{children:"Database"})," \u83b7\u53d6\u76f8\u5173\u4fe1\u606f\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"some_table = Table(\"some_table\", metadata_obj, autoload_with=engine)\nsome_table\n# Table('some_table', MetaData(), Column('x', INTEGER(), table=<some_table>), Column('y', INTEGER(), table=<some_table>), schema=None)\n"})}),"\n",(0,l.jsx)(n.h2,{id:"data---core",children:"Data - Core"}),"\n",(0,l.jsx)(n.h3,{id:"insert",children:"INSERT"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"INSERT"})," \u8bed\u53e5\u7531 ",(0,l.jsx)(n.code,{children:"insert()"})," \u65b9\u6cd5\u6784\u6210\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'from sqlalchemy import insert\n\nstmt = insert(user_table).values(name=\'spongebob\', fullname="Spongebob Squarepants")\n\nprint(stmt)\n# INSERT INTO user_account (name, fullname) VALUES (:name, :fullname)\ncomplied = stmt.compile()\ncomplied.params\n# {\'name\': \'spongebob\', \'fullname\': \'Spongebob Squarepants\'}\n\nwith engine.begin() as conn:\n    result = conn.execute(stmt)\n    print(result.inserted_primary_key)\n\n\nwith engine.begin() as conn:\n    conn.execute(\n        insert(user_table),\n        [\n            {"name": "sandy", "fullname": "Sandy Cheeks"},\n            {"name": "patrick", "fullname": "Patrick Star"}\n        ]\n    )\n'})}),"\n",(0,l.jsx)(n.h3,{id:"select",children:"SELECT"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import select\nstmt = select(user_table).where(user_table.c.name == 'spongebob')\n\nprint(stmt)\n# SELECT user_account.id, user_account.name, user_account.fullname \n# FROM user_account \n# WHERE user_account.name = :name_1\n\n# \u4f20\u5165\u9700\u8981\u7684\u5217\nprint(select(user_table.c.name, user_table.c.fullname))\n# SELECT user_account.name, user_account.fullname \n# FROM user_account\n\nwith engine.connect() as conn:\n    for row in conn.execute(stmt):\n        print(row)\n        # (1, 'spongebob', 'Spongebob Squarepants')\n\n# label() \u521b\u5efa\u522b\u540d\nstmt = (\n    select(\n        (\"Username: \" + user_table.c.name).label(\"username\"),\n    ).order_by(user_table.c.name)\n\n# literal_column \u521b\u5efa\u6587\u672c\u5217\nstmt = (\n    select(\n        literal_column(\"'some phrase'\").label(\"p\"), user_table.c.name\n    ).order_by(user_table.c.name)\n"})}),"\n",(0,l.jsx)(n.h4,{id:"where",children:"WHERE"}),"\n",(0,l.jsxs)(n.p,{children:["\u5bf9\u4e8e\u7b80\u5355\u7684 ",(0,l.jsx)(n.code,{children:"equal"})," \u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u9009\u62e9 ",(0,l.jsx)(n.code,{children:"filter_by"})," \u65b9\u6cd5\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"print(\n    select(address_table.c.email_address).\n    where(user_table.c.name == 'squidward').\n    where(address_table.c.user_id == user_table.c.id)\n)\n\nprint(\n    select(address_table.c.email_address).\n    where(\n         user_table.c.name == 'squidward',\n         address_table.c.user_id == user_table.c.id\n    )\n)\n\nfrom sqlalchemy import and_, or_\nprint(\n    select(Address.email_address).\n    where(\n        and_(\n            or_(User.name == 'squidward', User.name == 'sandy'),\n            Address.user_id == User.id\n        )\n    )\n)\n\n\nprint(\n    select(User).filter_by(name='spongebob', fullname='Spongebob Squarepants')\n)\n# SELECT user_account.id, user_account.name, user_account.fullname \n# FROM user_account \n# WHERE user_account.name = :name_1 AND user_account.fullname = :fullname_1\n"})}),"\n",(0,l.jsx)(n.h4,{id:"join",children:"JOIN"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"print(\n    select(user_table.c.name, address_table.c.email_address).\n    join_from(user_table, address_table)\n)\n\nprint(\n    select(user_table.c.name, address_table.c.email_address).\n    join(address_table)\n)\n\n# SELECT user_account.name, address.email_address \n# FROM user_account JOIN address ON user_account.id = address.user_id\n"})}),"\n",(0,l.jsx)(n.h3,{id:"update",children:"UPDATE"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import update\nstmt = (\n    update(user_table).where(user_table.c.name == 'patrick').\n    values(fullname='Patrick the Star')\n)\nprint(stmt)\n# UPDATE user_account SET fullname=:fullname WHERE user_account.name = :name_1\n\nwith engine.begin() as conn:\n    result = conn.execute(stmt)\n    print(result.rowcount)\n\n\nfrom sqlalchemy import bindparam\nstmt = (\n  update(user_table).\n  where(user_table.c.name == bindparam('oldname')).\n  values(name=bindparam('newname'))\n)\nwith engine.begin() as conn:\n  conn.execute(\n      stmt,\n      [\n         {'oldname':'jack', 'newname':'ed'},\n         {'oldname':'wendy', 'newname':'mary'},\n         {'oldname':'jim', 'newname':'jake'},\n      ]\n  )\n"})}),"\n",(0,l.jsx)(n.h3,{id:"delete",children:"DELETE"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import delete\nstmt = delete(user_table).where(user_table.c.name == 'patrick')\nprint(stmt)\n# DELETE FROM user_account WHERE user_account.name = :name_1\n\ndelete_stmt = (\n   delete(user_table).\n   where(user_table.c.id == address_table.c.user_id).\n   where(address_table.c.email_address == 'patrick@aol.com')\n )\nfrom sqlalchemy.dialects import mysql\nprint(delete_stmt.compile(dialect=mysql.dialect()))\n# DELETE FROM user_account USING user_account, address WHERE user_account.id = address.user_id AND address.email_address = %s\n"})}),"\n",(0,l.jsx)(n.h2,{id:"data---orm",children:"Data - ORM"}),"\n",(0,l.jsx)(n.h3,{id:"insert-1",children:"INSERT"}),"\n",(0,l.jsxs)(n.p,{children:["\u901a\u8fc7 ",(0,l.jsx)(n.code,{children:"__init__()"})," \u65b9\u6cd5\uff08optional\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a ",(0,l.jsx)(n.code,{children:"User"})," \u5b9e\u4f8b\u3002",(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.code,{children:"session.new"})," \u67e5\u770b pending objects."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import Session\n\n# \u65e0\u9700\u63d0\u4f9b primary key, auto-incrementing \u4f1a\u63d0\u4f9b\nsquidward = User(name=\"squidward\", fullname=\"Squidward Tentacles\")\nkrabs = User(name=\"ehkrabs\", fullname=\"Eugene H. Krabs\")\n\nsession = Session(engine)\nsession.add(squidward)\nsession.add(krabs)\nsession.new\n# IdentitySet([User(id=None, name='squidward', fullname='Squidward Tentacles'), User(id=None, name='ehkrabs', fullname='Eugene H. Krabs')])\n\n# create new transaction or push changes into current transaction\n# transaction remains open \n# optional, \u56e0\u4e3a\u9ed8\u8ba4 autoflush\nsession.flush()\n\n# flush \u4e4b\u540e\uff0c\u6570\u636e\u8fdb\u5165 persistent state\uff0c\u52a0\u5165\u5230 identity map \u4e2d\nsquidward.id\n# 25\n\n# Session.get() \u4ece identity map \u4e2d\u83b7\u53d6\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219 SELECT\nsession.get(User, 25)\n\n# commit transaction. Session.commit(), Session.rollback(), or Session.close()\nsession.commit()\n\n# release all connections\nsession.close()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"select-1",children:"SELECT"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.code,{children:"ORM"})," \u6a21\u5f0f\u4e0b\uff0c",(0,l.jsx)(n.code,{children:"row"})," \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u5f53\u524d ",(0,l.jsx)(n.code,{children:"mapped class"})," \u7684\u5b9e\u4f8b(",(0,l.jsx)(n.code,{children:"Entity"}),")\u3002"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:"from sqlalchemy.orm import Session\nstmt = select(User).where(User.name == 'spongebob')\nwith Session(engine) as session:\n    for row in session.execute(stmt):\n        print(row)\n        # (User(id=1, name='spongebob', fullname='Spongebob Squarepants'),)\n\nsession.execute(select(User)).first()\nsession.execute(select(User.name, User.fullname)).first()\n"})}),"\n",(0,l.jsx)(n.h3,{id:"update-1",children:"UPDATE"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'sandy = session.execute(select(User).filter_by(name="sandy")).scalar_one()\nsandy\n# User(id=10, name=\'sandy\', fullname=\'Sandy Cheeks\')\n\nsandy.fullname = "Sandy Squirrel"\nsandy in session.dirty\n# True\n\n# \u4efb\u4f55 SELECT \u90fd\u4f1a\u89e6\u53d1 autoflush\nsandy_fullname = session.execute(\n    select(User.fullname).where(User.id == 10)\n).scalar_one()\n\nsandy in session.dirty\n# False\n\nsession.commit()\n\n\n# ORM-enabled \u6a21\u5f0f\uff0c\u4f1a\u66f4\u65b0 identity\nsession.execute(\n    update(User).\n    where(User.name == "sandy").\n    values(fullname="Sandy Squirrel Extraordinaire")\n    # execution_options(synchronize_session="fetch")\n)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"delete-1",children:"DELETE"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-python",children:'ehkrabs = session.get(User, 26)\nsession.delete(ehkrabs)\nsession.commit()\n\n# ORM-enabled \u6a21\u5f0f\nsession.execute(delete(User).where(User.name == "squidward"))\n'})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}}}]);
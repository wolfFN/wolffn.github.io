"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[2247],{7168:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>s});var t=r(30758);const a={},i=t.createContext(a);function o(n){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),t.createElement(i.Provider,{value:e},n.children)}},98349:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"javascript/snippets/conditional","title":"\u6761\u4ef6\u8bed\u53e5","description":"Array.includes","source":"@site/docs/javascript/snippets/conditional.md","sourceDirName":"javascript/snippets","slug":"/javascript/snippets/conditional","permalink":"/docs/javascript/snippets/conditional","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"\u6761\u4ef6\u8bed\u53e5"},"sidebar":"JavaScript","previous":{"title":"\u6a21\u5757\u5316","permalink":"/docs/javascript/module"},"next":{"title":"\u5b9e\u7528\u51fd\u6570","permalink":"/docs/javascript/snippets/functions"}}');var a=r(86070),i=r(7168);const o={title:"\u6761\u4ef6\u8bed\u53e5"},s="Better Conditionals",l={},c=[{value:"Array.includes",id:"arrayincludes",level:3},{value:"Return Early",id:"return-early",level:3},{value:"Use Default Function Parameters And Destructuring",id:"use-default-function-parameters-and-destructuring",level:3},{value:"Favor Map/Object Literal than Switch Statement",id:"favor-mapobject-literal-than-switch-statement",level:3},{value:"Array.filter, Array.every, Array.any",id:"arrayfilter-arrayevery-arrayany",level:3}];function u(n){const e={code:"code",h1:"h1",h3:"h3",header:"header",pre:"pre",...(0,i.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"better-conditionals",children:"Better Conditionals"})}),"\n",(0,a.jsx)(e.h3,{id:"arrayincludes",children:"Array.includes"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function test(fruit) {\n    if (fruit == 'apple' || fruit == 'strawberry') {\n        console.log('red');\n    }\n}\n\nfunction test(fruit) {\n    // extract conditions to array\n    const redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];\n    if (redFruits.includes(fruit)) {\n        console.log('red');\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"return-early",children:"Return Early"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"/_ return early when invalid conditions found _/;\n\nfunction test(fruit, quantity) {\n    const redFruits = ['apple', 'strawberry', 'cherry', 'cranberries'];\n\n    if (!fruit) throw new Error('No fruit!'); // condition 1: throw error early\n    if (!redFruits.includes(fruit)) return; // condition 2: stop when fruit is not red\n\n    console.log('red');\n\n    // condition 3: must be big quantity\n    if (quantity > 10) {\n        console.log('big quantity');\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"use-default-function-parameters-and-destructuring",children:"Use Default Function Parameters And Destructuring"}),"\n",(0,a.jsx)(e.h3,{id:"favor-mapobject-literal-than-switch-statement",children:"Favor Map/Object Literal than Switch Statement"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"function test(color) {\n    // use switch case to find fruits in color\n    switch (color) {\n        case 'red':\n            return ['apple', 'strawberry'];\n        case 'yellow':\n            return ['banana', 'pineapple'];\n        case 'purple':\n            return ['grape', 'plum'];\n        default:\n            return [];\n    }\n}\n\n// use object literal to find fruits in color\nconst fruitColor = {\n    red: ['apple', 'strawberry'],\n    yellow: ['banana', 'pineapple'],\n    purple: ['grape', 'plum'],\n};\n\nfunction test(color) {\n    return fruitColor[color] || [];\n}\n\n// use Map to find fruits in color\nconst fruitColor = new Map()\n    .set('red', ['apple', 'strawberry'])\n    .set('yellow', ['banana', 'pineapple'])\n    .set('purple', ['grape', 'plum']);\n\nfunction test(color) {\n    return fruitColor.get(color) || [];\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"arrayfilter-arrayevery-arrayany",children:"Array.filter, Array.every, Array.any"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"const fruits = [\n    { name: 'apple', color: 'red' },\n    { name: 'banana', color: 'yellow' },\n    { name: 'grape', color: 'purple' },\n];\n\nfunction test(color) {\n    // use Array filter to find fruits in color\n    return fruits.filter(f => f.color == color);\n}\n\nfunction test() {\n    // condition: short way, all fruits must be red\n    const isAllRed = fruits.every(f => f.color == 'red');\n    console.log(isAllRed); // false\n}\n\nfunction test() {\n    // condition: if any fruit is red\n    const isAnyRed = fruits.some(f => f.color == 'red');\n    console.log(isAnyRed); // true\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}}}]);
"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[1179],{3905:function(n,e,t){t.d(e,{Zo:function(){return p},kt:function(){return m}});var r=t(67294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},s=Object.keys(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var i=r.createContext({}),l=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},p=function(n){var e=l(n.components);return r.createElement(i.Provider,{value:e},n.children)},u="mdxType",g={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},b=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,s=n.originalType,i=n.parentName,p=c(n,["components","mdxType","originalType","parentName"]),u=l(t),b=o,m=u["".concat(i,".").concat(b)]||u[b]||g[b]||s;return t?r.createElement(m,a(a({ref:e},p),{},{components:t})):r.createElement(m,a({ref:e},p))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var s=t.length,a=new Array(s);a[0]=b;var c={};for(var i in e)hasOwnProperty.call(e,i)&&(c[i]=e[i]);c.originalType=n,c[u]="string"==typeof n?n:o,a[1]=c;for(var l=2;l<s;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}b.displayName="MDXCreateElement"},29345:function(n,e,t){t.r(e),t.d(e,{assets:function(){return p},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return u}});var r=t(87462),o=t(63366),s=(t(67294),t(3905)),a=["components"],c={title:"Dijkstra"},i=void 0,l={unversionedId:"algorithm/graphs/dijkstra",id:"algorithm/graphs/dijkstra",title:"Dijkstra",description:"\u5927\u540d\u9f0e\u9f0e\u7684\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u4e0d\u518d\u8d58\u8ff0",source:"@site/docs/algorithm/graphs/dijkstra.md",sourceDirName:"algorithm/graphs",slug:"/algorithm/graphs/dijkstra",permalink:"/docs/algorithm/graphs/dijkstra",draft:!1,tags:[],version:"current",frontMatter:{title:"Dijkstra"},sidebar:"algorithm",previous:{title:"Bellman-Ford",permalink:"/docs/algorithm/graphs/bellman-ford"},next:{title:"\u4e8c\u5206\u67e5\u627e",permalink:"/docs/algorithm/application/binary-search"}},p={},u=[{value:"\u6570\u636e\u7ed3\u6784",id:"\u6570\u636e\u7ed3\u6784",level:2},{value:"\u7b97\u6cd5\u6b65\u9aa4",id:"\u7b97\u6cd5\u6b65\u9aa4",level:2},{value:"\u793a\u4f8b",id:"\u793a\u4f8b",level:2},{value:"\u5e94\u7528",id:"\u5e94\u7528",level:2}],g={toc:u},b="wrapper";function m(n){var e=n.components,c=(0,o.Z)(n,a);return(0,s.kt)(b,(0,r.Z)({},g,c,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u5927\u540d\u9f0e\u9f0e\u7684\u6700\u77ed\u8def\u5f84\u7b97\u6cd5\uff0c\u4e0d\u518d\u8d58\u8ff0"),(0,s.kt)("h2",{id:"\u6570\u636e\u7ed3\u6784"},"\u6570\u636e\u7ed3\u6784"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// \u8f93\u5165\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684next\u8282\u70b9\uff0c\u8ddd\u79bb\uff1b\u4ee5\u53ca\u662f\u5426\u904d\u5386\u8fc7\u6539\u8282\u70b9\nconst graph = {\n  A: {\n    neighbours: {\n      B: 22,\n      ...\n    },\n    done: false;\n  },\n  B: {...},\n  ...\n}\n\n\n// \u6bcf\u4e2a\u8282\u70b9\u7684\u6700\u5c0fcost\nconst = {\n  A: 0,\n  B: 22,\n  ...\n}\n\n// \u6700\u5c0fcost\u5bf9\u5e94\u7684\u524d\u4e00\u8282\u70b9\nparent = {\n  A: 'B'\n}\n")),(0,s.kt)("h2",{id:"\u7b97\u6cd5\u6b65\u9aa4"},"\u7b97\u6cd5\u6b65\u9aa4"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"\u627e\u51fa\u8ddd\u79bb\u6700\u77ed\u7684\u8282\u70b9",(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"\u904d\u5386\u5176 neighbours"),(0,s.kt)("li",{parentName:"ul"},"\u5982\u679c\u8ba1\u7b97\u51fa neighbour \u7684 cost \u5c0f\u4e8e\u5176\u5f53\u524d cost\uff0c\u66f4\u65b0 neighbour \u7684 cost"),(0,s.kt)("li",{parentName:"ul"},"\u5bf9\u8be5\u8282\u70b9\u6807\u8bb0\u5b8c\u6210"))),(0,s.kt)("li",{parentName:"ul"},"\u91cd\u590d\u4e0a\u8ff0\u6b65\u9aa4\u3002")),(0,s.kt)("h2",{id:""}),(0,s.kt)("h2",{id:"\u793a\u4f8b"},"\u793a\u4f8b"),(0,s.kt)("p",null,"\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5bfb\u627e\u4ece \u8d77\u70b9 A \u5230 \u7ec8\u70b9 F \u7684\u6700\u77ed\u8def\u5f84\u3002",(0,s.kt)("br",{parentName:"p"}),"\n",(0,s.kt)("img",{alt:"WechatIMG112.jpeg",src:t(1591).Z,width:"1396",height:"1080"})),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"// graph, \u7528\u4ee5\u63cf\u8ff0\u95ee\u9898\nconst graph = {\n    A: { neighbours: { B: 5, C: 2 }, done: false },\n    B: { neighbours: { D: 4, E: 2 }, done: false },\n    C: { neighbours: { B: 8, E: 7 }, done: false },\n    D: { neighbours: { E: 6, F: 3 }, done: false },\n    E: { neighbours: { F: 1 }, done: false },\n    F: { neighbours: {}, done: false }\n};\n\n// \u83b7\u53d6\u672a\u5904\u7406\u7684\uff0c\u6700\u8fd1\u7684\u70b9\nconst getNearestNode = (costs, graph) => {\n    const sortedKeys = Object.keys(costs)\n        .filter(key => !graph[key].done)\n        .sort((a, b) => costs[a] - costs[b]);\n    return sortedKeys[0];\n};\n\nfunction dijkstra(graph) {\n    // \u5148\u8bb0\u5f55\u8d77\u59cb\u70b9\uff0c\u4e3a0\n    const costs = {\n        A: 0\n    };\n\n    const parents = {};\n    let key;\n    while ((key = getNearestNode(costs, graph))) {\n        const nbs = graph[key].neighbours;\n        for (const nb of Object.keys(nbs)) {\n            const cost = costs[key];\n            if (!costs[nb] || costs[nb] > cost + nbs[nb]) {\n                costs[nb] = cost + nbs[nb];\n                parents[nb] = key;\n            }\n        }\n        graph[key].done = true;\n    }\n    console.log(costs);\n    console.log(parents);\n}\n\ndijkstra(graph);\n\n// \u7ed3\u679c\u5982\u4e0b\n// costs\n{ A: 0, B: 5, C: 2, E: 7, D: 9, F: 8 }\n// parents\n{ B: 'A', C: 'A', E: 'B', D: 'B', F: 'E' }\n\n")),(0,s.kt)("h2",{id:"\u5e94\u7528"},"\u5e94\u7528"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problems/network-delay-time/"},"Leetcode 743. Network Delay Time"),(0,s.kt)("br",{parentName:"p"}),"\n","\u4ee3\u7801\u5982\u4e0b"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[][]} times\n * @param {number} N\n * @param {number} K\n * @return {number}\n */\nconst generateGraph = times => {\n    const graph = {};\n    for (const [t0, t1, t2] of times) {\n        if (!graph[t0]) {\n            graph[t0] = { neighbours: {} };\n        }\n        if (!graph[t1]) {\n            graph[t1] = { neighbours: {} };\n        }\n        graph[t0].neighbours[t1] = t2;\n    }\n    return graph;\n};\n\nconst getNearestNode = (costs, graph) => {\n    const sortedKeys = Object.keys(costs)\n        .filter(key => !graph[key].done)\n        .sort((a, b) => costs[a] - costs[b]);\n    return sortedKeys[0];\n};\n\nvar networkDelayTime = function (times, N, K) {\n    const graph = generateGraph(times);\n    const costs = { [K]: 0 };\n    const parents = {};\n\n    let key;\n    while ((key = getNearestNode(costs, graph))) {\n        const nbs = graph[key].neighbours;\n        for (const nb of Object.keys(nbs)) {\n            const cost = costs[key];\n            if (costs[nb] === undefined || costs[nb] > cost + nbs[nb]) {\n                costs[nb] = cost + nbs[nb];\n                parents[nb] = key;\n            }\n        }\n        graph[key].done = true;\n    }\n\n    if (Object.keys(costs).length !== N) {\n        return -1;\n    }\n    return Math.max(...Object.values(costs));\n};\n\nconsole.log(\n    networkDelayTime(\n        [\n            [2, 1, 1],\n            [2, 3, 1],\n            [3, 4, 1],\n        ],\n        4,\n        2,\n    ),\n);\nconsole.log(\n    networkDelayTime(\n        [\n            [1, 2, 1],\n            [2, 1, 3],\n        ],\n        2,\n        2,\n    ),\n);\n")))}m.isMDXComponent=!0},1591:function(n,e,t){e.Z=t.p+"assets/images/sample-a5e518942b5ba1f01d126fd732cb85db.jpg"}}]);
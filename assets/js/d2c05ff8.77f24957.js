"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[1338],{3905:function(e,n,o){o.d(n,{Zo:function(){return c},kt:function(){return p}});var t=o(7294);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function i(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function s(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)o=r[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var u=t.createContext({}),l=function(e){var n=t.useContext(u),o=n;return e&&(o="function"==typeof e?e(n):i(i({},n),e)),o},c=function(e){var n=l(e.components);return t.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var o=e.components,a=e.mdxType,r=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(o),p=a,h=m["".concat(u,".").concat(p)]||m[p]||d[p]||r;return o?t.createElement(h,i(i({ref:n},c),{},{components:o})):t.createElement(h,i({ref:n},c))}));function p(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=o.length,i=new Array(r);i[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<r;l++)i[l]=o[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},8630:function(e,n,o){o.r(n),o.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var t=o(7462),a=o(3366),r=(o(7294),o(3905)),i=["components"],s={title:"SQLAlchemy RelationShip"},u=void 0,l={unversionedId:"data-science/python/sql-alchemy-relationship",id:"data-science/python/sql-alchemy-relationship",isDocsHomePage:!1,title:"SQLAlchemy RelationShip",description:"One To One",source:"@site/docs/data-science/python/sql-alchemy-relationship.md",sourceDirName:"data-science/python",slug:"/data-science/python/sql-alchemy-relationship",permalink:"/docs/data-science/python/sql-alchemy-relationship",tags:[],version:"current",frontMatter:{title:"SQLAlchemy RelationShip"},sidebar:"Python",previous:{title:"SQLAlchemy",permalink:"/docs/data-science/python/sql-alchemy"}},c=[{value:"One To One",id:"one-to-one",children:[],level:2},{value:"One To Many",id:"one-to-many",children:[],level:2},{value:"Many To Many",id:"many-to-many",children:[],level:2}],d={toc:c};function m(e){var n=e.components,o=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"one-to-one"},"One To One"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from sqlalchemy import create_engine,Integer, String, Float, Column, ForeignKey\nfrom sqlalchemy.orm import Session, relationship\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Video(Base):\n    __tablename__ = \"video\"\n\n    id = Column(Integer, primary_key=True)\n    code = Column('code', String(10))\n    img = Column('img', String(100))\n    score = Column('score', Float())\n\n    author_id = Column(Integer, ForeignKey('author.id') )\n    author = relationship('Author', uselist=False, back_populates='video' )\n\nclass Author(Base):\n    __tablename__ = \"author\"\n    id = Column(Integer, primary_key=True)\n    name = Column('name', String(100))\n\n    video = relationship('Video', uselist=False, back_populates='author' )\n\n\n\nengine = create_engine(\n    \"mysql+pymysql://nodejs:nodejs@localhost:3306/nodejs\", echo=True, future=True)\n\nBase.metadata.create_all(engine)\n\nsession = Session(engine)\n\n\nvideo_a = Video(code='new_video', img='123', score=9)\nauthor_a = Author(name='test_author')\n\nauthor_a.video = video_a\n# also work\n# video_a.author = author_a\n\nsession.add(author_a)\nsession.add(video_a)\nsession.commit()\n")),(0,r.kt)("h2",{id:"one-to-many"},"One To Many"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Video(Base):\n    __tablename__ = \"video\"\n\n    id = Column(Integer, primary_key=True)\n    code = Column('code', String(10))\n    img = Column('img', String(100))\n    score = Column('score', Float())\n\n    author_id = Column(Integer, ForeignKey('author.id'))\n    author = relationship('Author',  back_populates='videos')\n\n\nclass Author(Base):\n    __tablename__ = \"author\"\n    id = Column(Integer, primary_key=True)\n    name = Column('name', String(100))\n\n    videos = relationship('Video', back_populates='author')\n\n\nvideo_a = Video(code='video a', img='123', score=9)\nvideo_b = Video(code='video b', img='123', score=8)\nauthor_a = Author(name='test_author')\n\n\nauthor_a.videos.append(video_a)\nauthor_a.videos.append(video_b)\n\n# also works\n# video_a.author = author_a\n# video_b.author = author_a\n\nsession.add(author_a)\nsession.commit()\n")),(0,r.kt)("h2",{id:"many-to-many"},"Many To Many"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class VideoAuthor(Base):\n    __tablename__ = 'video_author'\n    author_id = Column(Integer, ForeignKey(\"author.id\"), primary_key=True)\n    video_id = Column(Integer, ForeignKey(\"video.id\"), primary_key=True)\n    extra_data = Column(String(50))\n    video = relationship(\"Video\", back_populates=\"authors\")\n    author = relationship(\"Author\", back_populates=\"videos\")\n\n\nclass Video(Base):\n    __tablename__ = \"video\"\n    id = Column(Integer, primary_key=True)\n    code = Column('code', String(10))\n    img = Column('img', String(100))\n    score = Column('score', Float())\n\n    authors = relationship('VideoAuthor',  back_populates='video')\n\n\nclass Author(Base):\n    __tablename__ = \"author\"\n    id = Column(Integer, primary_key=True)\n    name = Column('name', String(100))\n\n    videos = relationship('VideoAuthor', back_populates='author')\n\n\nvideo_a = Video(code='video a', img='123', score=9)\nvideo_b = Video(code='video b', img='123', score=8)\nauthor_a = Author(name='test_author')\nauthor_b = Author(name='author b')\n\nva_a_a = VideoAuthor(video=video_a, author=author_a, extra_data='a a')\nva_a_b = VideoAuthor(video=video_a, author=author_b, extra_data='a b')\nva_b_a = VideoAuthor(video=video_b, author=author_a, extra_data='b a')\nva_b_b = VideoAuthor(video=video_b, author=author_b, extra_data='b b')\n\nsession.add(va_a_a)\nsession.add(va_a_b)\nsession.add(va_b_a)\nsession.add(va_b_b)\n\nsession.commit()\n")))}m.isMDXComponent=!0}}]);
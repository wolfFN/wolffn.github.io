(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{191:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return i})),r.d(n,"metadata",(function(){return c})),r.d(n,"rightToc",(function(){return l})),r.d(n,"default",(function(){return u}));var t=r(2),o=r(6),a=(r(0),r(197)),i={title:"\u904d\u5386"},c={unversionedId:"algorithm/tree/traverse",id:"algorithm/tree/traverse",isDocsHomePage:!1,title:"\u904d\u5386",description:"\u6811\u7684\u904d\u5386\u4e3b\u8981\u5206\u524d\u3001\u4e2d\u3001\u540e\u5e8f\uff0c\u6bcf\u79cd\u904d\u5386\u90fd\u53ef\u4ee5\u5206\u522b\u7528\u9012\u5f52\uff08recursion\uff09\u548c\u5faa\u73af\uff08iteration\uff09\u6765\u5b9e\u73b0\u3002",source:"@site/docs/algorithm/tree/traverse.md",slug:"/algorithm/tree/traverse",permalink:"/docs/algorithm/tree/traverse",version:"current",sidebar:"algorithm",previous:{title:"\u5b50\u5b57\u7b26\u4e32\u67e5\u627e",permalink:"/docs/algorithm/string/substring_search"},next:{title:"\u5e76\u67e5\u96c6",permalink:"/docs/algorithm/graphs/union-find"}},l=[{value:"Pre-order",id:"pre-order",children:[]},{value:"In-order",id:"in-order",children:[]},{value:"Post-order",id:"post-order",children:[]}],s={rightToc:l};function u(e){var n=e.components,r=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(t.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"\u6811\u7684\u904d\u5386\u4e3b\u8981\u5206\u524d\u3001\u4e2d\u3001\u540e\u5e8f\uff0c\u6bcf\u79cd\u904d\u5386\u90fd\u53ef\u4ee5\u5206\u522b\u7528\u9012\u5f52\uff08recursion\uff09\u548c\u5faa\u73af\uff08iteration\uff09\u6765\u5b9e\u73b0\u3002"),Object(a.b)("h2",{id:"pre-order"},"Pre-order"),Object(a.b)("p",null,"root -> left -> right",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("a",Object(t.a)({parentName:"p"},{href:"https://leetcode.com/problems/binary-tree-preorder-traversal/"}),"Leetcode 144")),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-javascript"}),"\n/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\n// Recursion\nfunction preorderTraversal(root) {\n    const result = [];\n    pre(root, result);\n    return result;\n};\n\nfunction pre(node, result) {\n    if (!node) {\n        return;\n    }\n    result.push(node.val);\n    pre(node.left, result);\n    pre(node.right, result);\n}\n\n// Iteration\nfunction preorderTraversal(root) {\n    const stack = [root];\n    const result = [];\n    let node;\n    while (node = stack.pop()) {\n        result.push(node.val);\n        if (node.right) {\n            stack.push(node.right);\n        }\n        if (node.left) {\n            stack.push(node.left);\n        }\n    }\n    \n    return result;\n};\n\n")),Object(a.b)("h2",{id:"in-order"},"In-order"),Object(a.b)("p",null,"left -> root -> right",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("a",Object(t.a)({parentName:"p"},{href:"https://leetcode.com/problems/binary-tree-inorder-traversal/"}),"Leetcode 94")),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-javascript"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\n// Recursion\nvar inorderTraversal = function(root) {\n    const result = [];\n    inoder(root, result);\n    return result;\n};\n\nconst inoder = function(node, result) {\n    if (!node) {\n        return;\n    }\n    inoder(node.left, result);\n    result.push(node.val);\n    inoder(node.right, result);\n};\n\n\n// Iteration\nvar inorderTraversal = function(root) {\n    const result = [];\n    const stack = [];\n    while (root || stack.length()) {\n        if (root) {\n            stack.push(root);\n            root = root.left;\n        } else {\n            root = stack.pop();\n            result.push(root.val);\n            root = root.right;\n        }\n    }\n\n    return result;\n};\n\n\n")),Object(a.b)("h2",{id:"post-order"},"Post-order"),Object(a.b)("p",null,"left -> right -> root",Object(a.b)("br",{parentName:"p"}),"\n",Object(a.b)("a",Object(t.a)({parentName:"p"},{href:"https://leetcode.com/problems/binary-tree-postorder-traversal/"}),"Leetcode 145")),Object(a.b)("pre",null,Object(a.b)("code",Object(t.a)({parentName:"pre"},{className:"language-javascript"}),"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\n\n\n// Recursion\nvar postorderTraversal = function(root) {\n    const result = [];\n    postorder(root, result);\n    return result;\n};\n\nconst postorder = function(node, result) {\n    if (!node) {\n        return;\n    }\n    postorder(node.left, result);\n    postorder(node.right, result);\n    result.push(node.val);\n}\n\n// Iteration\nvar postorderTraversal = function(root) {\n    const result = [];\n    const stack = [root];\n    while (stack.length) {\n        const node = stack.pop();\n\n        if (!node) {\n            continue;\n        }\n\n        result.unshift(node.val);\n        stack.push(node.left);\n        stack.push(node.right);\n    }\n    return result;\n};\n\n")))}u.isMDXComponent=!0},197:function(e,n,r){"use strict";r.d(n,"a",(function(){return p})),r.d(n,"b",(function(){return b}));var t=r(0),o=r.n(t);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function c(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=o.a.createContext({}),u=function(e){var n=o.a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):c(c({},n),e)),r},p=function(e){var n=u(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},f=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(r),f=t,b=p["".concat(i,".").concat(f)]||p[f]||d[f]||a;return r?o.a.createElement(b,c(c({ref:n},s),{},{components:r})):o.a.createElement(b,c({ref:n},s))}));function b(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,i=new Array(a);i[0]=f;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:t,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"}}]);
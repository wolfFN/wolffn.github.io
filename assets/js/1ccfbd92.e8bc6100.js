"use strict";(self.webpackChunkdocusaurus_demo=self.webpackChunkdocusaurus_demo||[]).push([[2283],{4904:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"data/python/sql-alchemy-relationship","title":"SQLAlchemy RelationShip","description":"One To One","source":"@site/docs/data/python/sql-alchemy-relationship.md","sourceDirName":"data/python","slug":"/data/python/sql-alchemy-relationship","permalink":"/docs/data/python/sql-alchemy-relationship","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"SQLAlchemy RelationShip"},"sidebar":"Python","previous":{"title":"SQLAlchemy","permalink":"/docs/data/python/sql-alchemy"}}');var t=o(86070),r=o(7168);const i={title:"SQLAlchemy RelationShip"},s=void 0,d={},l=[{value:"One To One",id:"one-to-one",level:2},{value:"One To Many",id:"one-to-many",level:2},{value:"Many To Many",id:"many-to-many",level:2}];function u(e){const n={code:"code",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"one-to-one",children:"One To One"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import create_engine,Integer, String, Float, Column, ForeignKey\nfrom sqlalchemy.orm import Session, relationship\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Video(Base):\n    __tablename__ = \"video\"\n\n    id = Column(Integer, primary_key=True)\n    code = Column('code', String(10))\n    img = Column('img', String(100))\n    score = Column('score', Float())\n\n    author_id = Column(Integer, ForeignKey('author.id') )\n    author = relationship('Author', uselist=False, back_populates='video' )\n\nclass Author(Base):\n    __tablename__ = \"author\"\n    id = Column(Integer, primary_key=True)\n    name = Column('name', String(100))\n\n    video = relationship('Video', uselist=False, back_populates='author' )\n\n\n\nengine = create_engine(\n    \"mysql+pymysql://nodejs:nodejs@localhost:3306/nodejs\", echo=True, future=True)\n\nBase.metadata.create_all(engine)\n\nsession = Session(engine)\n\n\nvideo_a = Video(code='new_video', img='123', score=9)\nauthor_a = Author(name='test_author')\n\nauthor_a.video = video_a\n# also work\n# video_a.author = author_a\n\nsession.add(author_a)\nsession.add(video_a)\nsession.commit()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"one-to-many",children:"One To Many"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class Video(Base):\n    __tablename__ = \"video\"\n\n    id = Column(Integer, primary_key=True)\n    code = Column('code', String(10))\n    img = Column('img', String(100))\n    score = Column('score', Float())\n\n    author_id = Column(Integer, ForeignKey('author.id'))\n    author = relationship('Author',  back_populates='videos')\n\n\nclass Author(Base):\n    __tablename__ = \"author\"\n    id = Column(Integer, primary_key=True)\n    name = Column('name', String(100))\n\n    videos = relationship('Video', back_populates='author')\n\n\nvideo_a = Video(code='video a', img='123', score=9)\nvideo_b = Video(code='video b', img='123', score=8)\nauthor_a = Author(name='test_author')\n\n\nauthor_a.videos.append(video_a)\nauthor_a.videos.append(video_b)\n\n# also works\n# video_a.author = author_a\n# video_b.author = author_a\n\nsession.add(author_a)\nsession.commit()\n"})}),"\n",(0,t.jsx)(n.h2,{id:"many-to-many",children:"Many To Many"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"from sqlalchemy import create_engine, Integer, String, Float, Column, ForeignKey, Table\nfrom sqlalchemy.orm import Session, relationship\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nVideoAuthor = Table(\"video_author\", Base.metadata,\n    Column('author_id', Integer, ForeignKey( \"author.id\"), primary_key=True),\n    Column('video_id', Integer, ForeignKey( \"video.id\"), primary_key=True)\n)\n\n\nclass Video(Base):\n    __tablename__ = \"video\"\n    id = Column(Integer, primary_key=True)\n    code = Column('code', String(10))\n    img = Column('img', String(100))\n    score = Column('score', Float())\n\n    authors = relationship(\n        'Author', secondary=VideoAuthor, back_populates='videos')\n\n\nclass Author(Base):\n    __tablename__ = \"author\"\n    id = Column(Integer, primary_key=True)\n    name = Column('name', String(100))\n\n    videos = relationship('Video', secondary=VideoAuthor,\n                          back_populates='authors')\n\n\nengine = create_engine(\n    \"mysql+pymysql://nodejs:nodejs@localhost:3306/nodejs\", echo=True, future=True)\n\nBase.metadata.create_all(engine)\n\nsession = Session(engine)\n\n\nvideo_a = Video(code='video a', img='123', score=9)\nvideo_b = Video(code='video b', img='123', score=8)\nauthor_a = Author(name='test_author')\nauthor_b = Author(name='author b')\n\nauthor_a.videos.append(video_a)\nauthor_b.videos.append(video_b)\nauthor_b.videos.append(video_a)\n\nsession.add(author_a)\nsession.add(author_b)\n\nsession.commit()\n\n"})}),"\n",(0,t.jsxs)(n.p,{children:["\u5982\u679c\u60f3\u5728 ",(0,t.jsx)(n.code,{children:"relationship"})," \u4e2d\u6dfb\u52a0 ",(0,t.jsx)(n.code,{children:"extra_data"}),"\uff0c\u4f7f\u7528\u5982\u4e0b\u65b9\u6cd5\u3002"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"class VideoAuthor(Base):\n    __tablename__ = 'video_author'\n    author_id = Column(Integer, ForeignKey(\"author.id\"), primary_key=True)\n    video_id = Column(Integer, ForeignKey(\"video.id\"), primary_key=True)\n    extra_data = Column(String(50))\n    video = relationship(\"Video\", back_populates=\"authors\")\n    author = relationship(\"Author\", back_populates=\"videos\")\n\n\nclass Video(Base):\n    __tablename__ = \"video\"\n    id = Column(Integer, primary_key=True)\n    code = Column('code', String(10))\n    img = Column('img', String(100))\n    score = Column('score', Float())\n\n    authors = relationship('VideoAuthor',  back_populates='video')\n\n\nclass Author(Base):\n    __tablename__ = \"author\"\n    id = Column(Integer, primary_key=True)\n    name = Column('name', String(100))\n\n    videos = relationship('VideoAuthor', back_populates='author')\n\n\nvideo_a = Video(code='video a', img='123', score=9)\nvideo_b = Video(code='video b', img='123', score=8)\nauthor_a = Author(name='test_author')\nauthor_b = Author(name='author b')\n\nva_a_a = VideoAuthor(video=video_a, author=author_a, extra_data='a a')\nva_a_b = VideoAuthor(video=video_a, author=author_b, extra_data='a b')\nva_b_a = VideoAuthor(video=video_b, author=author_a, extra_data='b a')\nva_b_b = VideoAuthor(video=video_b, author=author_b, extra_data='b b')\n\nsession.add(va_a_a)\nsession.add(va_a_b)\nsession.add(va_b_a)\nsession.add(va_b_b)\n\nsession.commit()\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},7168:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>s});var a=o(30758);const t={},r=a.createContext(t);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);